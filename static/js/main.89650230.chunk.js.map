{"version":3,"sources":["components/SongTitle.js","components/Song.js","components/Pinch.js","components/Songbook.js","utils/parser.js","songs/songs.js","App.js","serviceWorker.js","index.js"],"names":["SongTitle","this","props","number","title","className","React","Component","Song","song","body","map","index","lyrics","chords","key","chord","Pinch","bind","usePinch","state","console","log","da","children","Songbook","defaultFontSize","fontSize","handleClick","setState","songbook","style","songs","parseLine","line","directiveMatch","match","type","directive","trim","value","chordRegex","bodyLine","replace","parseSong","parsedLines","split","filter","firstNotEmptyHead","findIndex","length","firstEmptyTail","slice","reverse","trimmedBody","directives","reduce","acc","val","App","Container","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.89650230.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SongTitle.css';\r\n\r\nclass SongTitle extends React.Component {\r\n\r\n    render() {\r\n        const {number, title} = this.props;\r\n        return (\r\n            <div className={\"songtitle\"}>{number}. {title}</div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nSongTitle.propTypes = {\r\n    number: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default SongTitle;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Song.css';\r\nimport SongTitle from './SongTitle';\r\n\r\nclass Song extends React.Component {\r\n\r\n    render() {\r\n        const {song} = this.props;\r\n\r\n        return <div className={\"song\"}>\r\n            <SongTitle number={song.number} title={song.title}/>\r\n            {song.body.map(({lyrics, chords}, index) => <div className=\"row\" key={`songline${index}`}>\r\n                <div className=\"col-8\">\r\n                    {lyrics || <br/>}\r\n                </div>\r\n                <div className=\"col-4\">\r\n                    {chords.map(chord => `${chord} `)}\r\n                </div>\r\n            </div>)}\r\n        </div>;\r\n    }\r\n}\r\n\r\nSong.propTypes = {\r\n    song: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Song;","import React from 'react';\r\nimport {usePinch} from 'react-use-gesture';\r\n\r\n\r\nconst Pinch = (props) => {\r\n\r\n    const bind = usePinch((state) => console.log(state.da));\r\n\r\n    return (<div {...bind()}>\r\n        {props.children}\r\n    </div>)\r\n};\r\n\r\nexport default Pinch;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Songbook.css'\r\nimport Song from './Song';\r\nimport Pinch from './Pinch';\r\n\r\nclass Songbook extends React.Component {\r\n    defaultFontSize = 14;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {fontSize: this.defaultFontSize};\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState(state => ({\r\n            ...state,\r\n            fontSize: state.fontSize + 1\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        const {songbook} = this.props;\r\n        return (\r\n            <Pinch>\r\n                <div className={\"songbook\"} style={{fontSize: this.state.fontSize + \"px\"}}>\r\n                    {songbook.songs.map((song, index) => <Song key={`song${index}`} song={song}/>)}\r\n                </div>\r\n            </Pinch>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nSongbook.propTypes = {\r\n    songbook: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Songbook;\r\n\r\n","const DIRECTIVE = 'DIRECTIVE';\r\nconst BODY_LINE = 'BODY_LINE';\r\n\r\nconst parseLine = line => {\r\n    const directiveRegex = /{(.*):(.*)}/;\r\n\r\n    const directiveMatch = line.match(directiveRegex);\r\n    if (directiveMatch) {\r\n        return {\r\n            type: DIRECTIVE,\r\n            directive: directiveMatch[1].trim(),\r\n            value: directiveMatch[2].trim()\r\n        }\r\n    }\r\n\r\n    const chordRegex = /\\[.*?]/g;\r\n    const lyrics = line.replace(chordRegex, '').trim();\r\n    const chords = (line.match(chordRegex) || []).map(chord => chord.replace(/[[\\]]/g, ''));\r\n    const bodyLine = {lyrics, chords};\r\n\r\n    return {type: BODY_LINE, bodyLine}\r\n};\r\n\r\nconst parseSong = (song) => {\r\n    const parsedLines = song.split(\"\\n\").map(parseLine);\r\n    const body = parsedLines.filter(line => line.type === BODY_LINE).map(line => line.bodyLine);\r\n    const firstNotEmptyHead = body.findIndex(line => line.lyrics || line.chords.length);\r\n    const firstEmptyTail = body.length - body.slice().reverse().findIndex(line => line.lyrics || line.chords.length);\r\n    const trimmedBody = body.slice(firstNotEmptyHead, firstEmptyTail);\r\n\r\n    const directives = parsedLines.filter(line => line.type === DIRECTIVE).reduce((acc, val) => ({...acc, [val.directive]: val.value}), {});\r\n\r\n    return {\r\n        ...directives,\r\n        body: trimmedBody\r\n    };\r\n};\r\n\r\nexport const parseSongs = (rawSongs) => {\r\n    const songs = rawSongs.split(/---\\s*\\n/).map(parseSong);\r\n    return {\r\n        songs\r\n    };\r\n};","import {parseSongs} from \"../utils/parser\";\r\n\r\n// language=TEXT\r\nconst songs = `\r\n{title: Otwórz me oczy, o Panie}\r\n{number: 215}\r\n{key: C}\r\n\r\nOtwórz me oczy o Panie               [C]\r\nOtwórz me oczy i serce               [e]\r\nChcę widzieć Ciebie                  [F]\r\nChcę widzieć Ciebie                  [C]\r\n\r\nRef. Wywyższonego widzieć chcę       [e] [a]\r\nujrzeć Ciebie w blasku Twej chwały   [F] [G]\r\nWylej swą miłość i moc,              [G] [e] [a]\r\ngdy śpiewam “Święty, święty, święty” [F] [d] [G]\r\nChcę widzieć Ciebie                  [C]\r\n\r\n---\r\n{title: Nie bój się, Ja Jestem}\r\n{number: 217}\r\n{key: D}\r\n\r\nNie bój się, Ja Jestem               [D] [e7]\r\nBlisko tak, gdy zechcesz             [D/Fis] [G]\r\nPrzytul się i trwaj tak przy mnie    [D] [A/Cis]\r\nZawsze                               [h7/9] [A]\r\n                                     \r\nCzekam tu na ciebie                  [D] [e7]\r\nAbyś był w mym niebie                [D/Fis] [G]\r\nTylko zechciej wybrać właśnie        [D] [A/Cis]\r\nMnie                                 [fis] [G]\r\n[B] [a] [G] [B] [C] [D]\r\n\r\nRef. Bo tylko Jezus jest mą miłością [D] [fis]\r\nTylko On moją radością               [h] [A]\r\nTylko Jezus jest mym wytchnieniem    [G] [e7]\r\nPanem moim jest                      [fis] [Asus] [A7]\r\nTylko Jezus jest mą miłością         [D] [A/Cis]\r\nTylko On moją radością               [h] [A]\r\nTylko Jezus jest mym wytchnieniem    [G] [e7]\r\nPanem moim jest                      [A]\r\n`;\r\n\r\nconst songbook = parseSongs(songs);\r\nexport default songbook;","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Container} from 'react-bootstrap';\r\nimport Songbook from './components/Songbook';\r\nimport songbook from './songs/songs';\r\n\r\nconst App = () => (\r\n    <Container>\r\n        <Songbook songbook={songbook}/>\r\n    </Container>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}